
/*
 *    MCreator note: This file will be REGENERATED on each build.
 */
package net.mcreator.superiorstructures.init;

import net.neoforged.neoforge.registries.DeferredRegister;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.capabilities.RegisterCapabilitiesEvent;
import net.neoforged.neoforge.capabilities.Capabilities;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.bus.api.SubscribeEvent;

import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.Block;
import net.minecraft.core.registries.BuiltInRegistries;

import net.mcreator.superiorstructures.block.entity.WardingEyesBlockEntity;
import net.mcreator.superiorstructures.block.entity.TunerodStemBlockEntity;
import net.mcreator.superiorstructures.block.entity.TuneBlockBlockEntity;
import net.mcreator.superiorstructures.block.entity.TransceiverSendingOnBlockEntity;
import net.mcreator.superiorstructures.block.entity.TransceiverSendingOffBlockEntity;
import net.mcreator.superiorstructures.block.entity.TransceiverRecievingOnBlockEntity;
import net.mcreator.superiorstructures.block.entity.TransceiverBlockEntity;
import net.mcreator.superiorstructures.block.entity.TownTickingDirtBlockEntity;
import net.mcreator.superiorstructures.block.entity.TickingStoneBlockEntity;
import net.mcreator.superiorstructures.block.entity.TickingNetherrackBlockEntity;
import net.mcreator.superiorstructures.block.entity.TickingGravelBlockEntity;
import net.mcreator.superiorstructures.block.entity.TickingEndstoneBlockEntity;
import net.mcreator.superiorstructures.block.entity.TickingDeepslateBlockEntity;
import net.mcreator.superiorstructures.block.entity.TickingBlackstoneBlockEntity;
import net.mcreator.superiorstructures.block.entity.TetherTileEntity;
import net.mcreator.superiorstructures.block.entity.TallYellowVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallYellowPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallWhitePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallRedVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallRedPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallPurpleVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallPurplePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallPinkVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallPinkPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallOrangeVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallOrangePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallMagentaVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallMagentaPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallLimeVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallLimePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallLightGrayVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallLightGrayPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallLightBlueVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallLightBluePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallGreenVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallGreenPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallDarkGrayVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallDarkGrayPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallCyanVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallCyanPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallBrownVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallBrownPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallBlueVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallBluePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallBlackVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.TallBlackPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SuspiciousTickingSandBlockEntity;
import net.mcreator.superiorstructures.block.entity.SuspiciousTickingDirtBlockEntity;
import net.mcreator.superiorstructures.block.entity.SuspiciousTickingCityEndstoneBlockEntity;
import net.mcreator.superiorstructures.block.entity.SpitefulEyeBlockEntity;
import net.mcreator.superiorstructures.block.entity.SpiralingSandBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallYellowVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallYellowPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallWhitePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallRedVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallRedPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallPurpleVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallPurplePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallPinkVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallPinkPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallOrangeVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallOrangePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallMagentaVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallMagentaPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallLimeVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallLimePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallLightGrayVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallLightGrayPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallLightBlueVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallLightBluePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallGreenVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallGreenPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallDarkGrayVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallDarkGrayPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallCyanVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallCyanPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallBrownVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallBrownPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallBlueVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallBluePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallBlackVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.SmallBlackPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.SingingSandBlockEntity;
import net.mcreator.superiorstructures.block.entity.SentinelBlockEntity;
import net.mcreator.superiorstructures.block.entity.SculkTeethBlockEntity;
import net.mcreator.superiorstructures.block.entity.PyramidTickingSandBlockEntity;
import net.mcreator.superiorstructures.block.entity.PuzzleBoxBlockEntity;
import net.mcreator.superiorstructures.block.entity.PulsingCoreBlockEntity;
import net.mcreator.superiorstructures.block.entity.PoweredCoreBlockEntity;
import net.mcreator.superiorstructures.block.entity.PowerCoreBlockEntity;
import net.mcreator.superiorstructures.block.entity.PlonkerBlockEntity;
import net.mcreator.superiorstructures.block.entity.PhasedEndoriteTilesBlockEntity;
import net.mcreator.superiorstructures.block.entity.MinerTickingStoneBlockEntity;
import net.mcreator.superiorstructures.block.entity.LushTickingDirtBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeYellowVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeYellowPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeWhitePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeRedVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeRedPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargePurpleVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargePurplePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargePinkVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargePinkPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeOrangeVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeOrangePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeMagentaVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeMagentaPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeLimeVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeLimePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeLightGrayVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeLightGrayPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeLightBlueVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeLightBluePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeGreenVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeGreenPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeDarkGrayVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeDarkGrayPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeCyanVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeCyanPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeBrownVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeBrownPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeBlueVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeBluePotBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeBlackVaseBlockEntity;
import net.mcreator.superiorstructures.block.entity.LargeBlackPotBlockEntity;
import net.mcreator.superiorstructures.block.entity.IconoclastBlockEntity;
import net.mcreator.superiorstructures.block.entity.GraveTickingDirtBlockEntity;
import net.mcreator.superiorstructures.block.entity.FortressTickingNetherrackBlockEntity;
import net.mcreator.superiorstructures.block.entity.FlavorblockBlockEntity;
import net.mcreator.superiorstructures.block.entity.ElectrifiedCopperPipeBlockEntity;
import net.mcreator.superiorstructures.block.entity.CopperPipeBlockEntity;
import net.mcreator.superiorstructures.block.entity.BurrowingThornsBlockEntity;
import net.mcreator.superiorstructures.block.entity.ArtificeryTableBlockEntity;
import net.mcreator.superiorstructures.block.entity.AncientTickingDirtBlockEntity;
import net.mcreator.superiorstructures.block.entity.AncientLightningCoilBlockEntity;
import net.mcreator.superiorstructures.block.entity.ActivatedPlonkerBlockEntity;
import net.mcreator.superiorstructures.block.entity.ActivatedMuncherBlockEntity;
import net.mcreator.superiorstructures.block.entity.ActivatedFanBlockEntity;
import net.mcreator.superiorstructures.block.entity.ActivatedFan3BlockEntity;
import net.mcreator.superiorstructures.block.entity.ActivatedFan2BlockEntity;
import net.mcreator.superiorstructures.SuperiorstructuresMod;

@EventBusSubscriber(bus = EventBusSubscriber.Bus.MOD)
public class SuperiorstructuresModBlockEntities {
	public static final DeferredRegister<BlockEntityType<?>> REGISTRY = DeferredRegister.create(BuiltInRegistries.BLOCK_ENTITY_TYPE, SuperiorstructuresMod.MODID);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_POT = register("small_pot", SuperiorstructuresModBlocks.SMALL_POT, SmallPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_POT = register("tall_pot", SuperiorstructuresModBlocks.TALL_POT, TallPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_POT = register("large_pot", SuperiorstructuresModBlocks.LARGE_POT, LargePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_RED_POT = register("small_red_pot", SuperiorstructuresModBlocks.SMALL_RED_POT, SmallRedPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_RED_POT = register("tall_red_pot", SuperiorstructuresModBlocks.TALL_RED_POT, TallRedPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_RED_POT = register("large_red_pot", SuperiorstructuresModBlocks.LARGE_RED_POT, LargeRedPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_ORANGE_POT = register("small_orange_pot", SuperiorstructuresModBlocks.SMALL_ORANGE_POT, SmallOrangePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_ORANGE_POT = register("tall_orange_pot", SuperiorstructuresModBlocks.TALL_ORANGE_POT, TallOrangePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_ORANGE_POT = register("large_orange_pot", SuperiorstructuresModBlocks.LARGE_ORANGE_POT, LargeOrangePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_YELLOW_POT = register("small_yellow_pot", SuperiorstructuresModBlocks.SMALL_YELLOW_POT, SmallYellowPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_YELLOW_POT = register("tall_yellow_pot", SuperiorstructuresModBlocks.TALL_YELLOW_POT, TallYellowPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_YELLOW_POT = register("large_yellow_pot", SuperiorstructuresModBlocks.LARGE_YELLOW_POT, LargeYellowPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_LIME_POT = register("small_lime_pot", SuperiorstructuresModBlocks.SMALL_LIME_POT, SmallLimePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_LIME_POT = register("tall_lime_pot", SuperiorstructuresModBlocks.TALL_LIME_POT, TallLimePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_LIME_POT = register("large_lime_pot", SuperiorstructuresModBlocks.LARGE_LIME_POT, LargeLimePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_GREEN_POT = register("small_green_pot", SuperiorstructuresModBlocks.SMALL_GREEN_POT, SmallGreenPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_GREEN_POT = register("tall_green_pot", SuperiorstructuresModBlocks.TALL_GREEN_POT, TallGreenPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_GREEN_POT = register("large_green_pot", SuperiorstructuresModBlocks.LARGE_GREEN_POT, LargeGreenPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_LIGHT_BLUE_POT = register("small_light_blue_pot", SuperiorstructuresModBlocks.SMALL_LIGHT_BLUE_POT, SmallLightBluePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_LIGHT_BLUE_POT = register("tall_light_blue_pot", SuperiorstructuresModBlocks.TALL_LIGHT_BLUE_POT, TallLightBluePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_LIGHT_BLUE_POT = register("large_light_blue_pot", SuperiorstructuresModBlocks.LARGE_LIGHT_BLUE_POT, LargeLightBluePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_CYAN_POT = register("small_cyan_pot", SuperiorstructuresModBlocks.SMALL_CYAN_POT, SmallCyanPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_CYAN_POT = register("tall_cyan_pot", SuperiorstructuresModBlocks.TALL_CYAN_POT, TallCyanPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_CYAN_POT = register("large_cyan_pot", SuperiorstructuresModBlocks.LARGE_CYAN_POT, LargeCyanPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_BLUE_POT = register("small_blue_pot", SuperiorstructuresModBlocks.SMALL_BLUE_POT, SmallBluePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_BLUE_POT = register("tall_blue_pot", SuperiorstructuresModBlocks.TALL_BLUE_POT, TallBluePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_BLUE_POT = register("large_blue_pot", SuperiorstructuresModBlocks.LARGE_BLUE_POT, LargeBluePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_PINK_POT = register("small_pink_pot", SuperiorstructuresModBlocks.SMALL_PINK_POT, SmallPinkPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_PINK_POT = register("tall_pink_pot", SuperiorstructuresModBlocks.TALL_PINK_POT, TallPinkPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_PINK_POT = register("large_pink_pot", SuperiorstructuresModBlocks.LARGE_PINK_POT, LargePinkPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_MAGENTA_POT = register("small_magenta_pot", SuperiorstructuresModBlocks.SMALL_MAGENTA_POT, SmallMagentaPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_MAGENTA_POT = register("tall_magenta_pot", SuperiorstructuresModBlocks.TALL_MAGENTA_POT, TallMagentaPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_MAGENTA_POT = register("large_magenta_pot", SuperiorstructuresModBlocks.LARGE_MAGENTA_POT, LargeMagentaPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_PURPLE_POT = register("small_purple_pot", SuperiorstructuresModBlocks.SMALL_PURPLE_POT, SmallPurplePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_PURPLE_POT = register("tall_purple_pot", SuperiorstructuresModBlocks.TALL_PURPLE_POT, TallPurplePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_PURPLE_POT = register("large_purple_pot", SuperiorstructuresModBlocks.LARGE_PURPLE_POT, LargePurplePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_BROWN_POT = register("small_brown_pot", SuperiorstructuresModBlocks.SMALL_BROWN_POT, SmallBrownPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_BROWN_POT = register("tall_brown_pot", SuperiorstructuresModBlocks.TALL_BROWN_POT, TallBrownPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_BROWN_POT = register("large_brown_pot", SuperiorstructuresModBlocks.LARGE_BROWN_POT, LargeBrownPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_WHITE_POT = register("small_white_pot", SuperiorstructuresModBlocks.SMALL_WHITE_POT, SmallWhitePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_WHITE_POT = register("tall_white_pot", SuperiorstructuresModBlocks.TALL_WHITE_POT, TallWhitePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_WHITE_POT = register("large_white_pot", SuperiorstructuresModBlocks.LARGE_WHITE_POT, LargeWhitePotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_LIGHT_GRAY_POT = register("small_light_gray_pot", SuperiorstructuresModBlocks.SMALL_LIGHT_GRAY_POT, SmallLightGrayPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_LIGHT_GRAY_POT = register("tall_light_gray_pot", SuperiorstructuresModBlocks.TALL_LIGHT_GRAY_POT, TallLightGrayPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_LIGHT_GRAY_POT = register("large_light_gray_pot", SuperiorstructuresModBlocks.LARGE_LIGHT_GRAY_POT, LargeLightGrayPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_DARK_GRAY_POT = register("small_dark_gray_pot", SuperiorstructuresModBlocks.SMALL_DARK_GRAY_POT, SmallDarkGrayPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_DARK_GRAY_POT = register("tall_dark_gray_pot", SuperiorstructuresModBlocks.TALL_DARK_GRAY_POT, TallDarkGrayPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_DARK_GRAY_POT = register("large_dark_gray_pot", SuperiorstructuresModBlocks.LARGE_DARK_GRAY_POT, LargeDarkGrayPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_BLACK_POT = register("small_black_pot", SuperiorstructuresModBlocks.SMALL_BLACK_POT, SmallBlackPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_BLACK_POT = register("tall_black_pot", SuperiorstructuresModBlocks.TALL_BLACK_POT, TallBlackPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_BLACK_POT = register("large_black_pot", SuperiorstructuresModBlocks.LARGE_BLACK_POT, LargeBlackPotBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_VASE = register("small_vase", SuperiorstructuresModBlocks.SMALL_VASE, SmallVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_VASE = register("tall_vase", SuperiorstructuresModBlocks.TALL_VASE, TallVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_VASE = register("large_vase", SuperiorstructuresModBlocks.LARGE_VASE, LargeVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_RED_VASE = register("small_red_vase", SuperiorstructuresModBlocks.SMALL_RED_VASE, SmallRedVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_RED_VASE = register("tall_red_vase", SuperiorstructuresModBlocks.TALL_RED_VASE, TallRedVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_RED_VASE = register("large_red_vase", SuperiorstructuresModBlocks.LARGE_RED_VASE, LargeRedVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_ORANGE_VASE = register("small_orange_vase", SuperiorstructuresModBlocks.SMALL_ORANGE_VASE, SmallOrangeVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_ORANGE_VASE = register("tall_orange_vase", SuperiorstructuresModBlocks.TALL_ORANGE_VASE, TallOrangeVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_ORANGE_VASE = register("large_orange_vase", SuperiorstructuresModBlocks.LARGE_ORANGE_VASE, LargeOrangeVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_YELLOW_VASE = register("small_yellow_vase", SuperiorstructuresModBlocks.SMALL_YELLOW_VASE, SmallYellowVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_YELLOW_VASE = register("tall_yellow_vase", SuperiorstructuresModBlocks.TALL_YELLOW_VASE, TallYellowVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_YELLOW_VASE = register("large_yellow_vase", SuperiorstructuresModBlocks.LARGE_YELLOW_VASE, LargeYellowVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_LIME_VASE = register("small_lime_vase", SuperiorstructuresModBlocks.SMALL_LIME_VASE, SmallLimeVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_LIME_VASE = register("tall_lime_vase", SuperiorstructuresModBlocks.TALL_LIME_VASE, TallLimeVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_LIME_VASE = register("large_lime_vase", SuperiorstructuresModBlocks.LARGE_LIME_VASE, LargeLimeVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_GREEN_VASE = register("small_green_vase", SuperiorstructuresModBlocks.SMALL_GREEN_VASE, SmallGreenVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_GREEN_VASE = register("tall_green_vase", SuperiorstructuresModBlocks.TALL_GREEN_VASE, TallGreenVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_GREEN_VASE = register("large_green_vase", SuperiorstructuresModBlocks.LARGE_GREEN_VASE, LargeGreenVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_CYAN_VASE = register("small_cyan_vase", SuperiorstructuresModBlocks.SMALL_CYAN_VASE, SmallCyanVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_CYAN_VASE = register("tall_cyan_vase", SuperiorstructuresModBlocks.TALL_CYAN_VASE, TallCyanVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_CYAN_VASE = register("large_cyan_vase", SuperiorstructuresModBlocks.LARGE_CYAN_VASE, LargeCyanVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_LIGHT_BLUE_VASE = register("small_light_blue_vase", SuperiorstructuresModBlocks.SMALL_LIGHT_BLUE_VASE, SmallLightBlueVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_LIGHT_BLUE_VASE = register("tall_light_blue_vase", SuperiorstructuresModBlocks.TALL_LIGHT_BLUE_VASE, TallLightBlueVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_LIGHT_BLUE_VASE = register("large_light_blue_vase", SuperiorstructuresModBlocks.LARGE_LIGHT_BLUE_VASE, LargeLightBlueVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_BLUE_VASE = register("small_blue_vase", SuperiorstructuresModBlocks.SMALL_BLUE_VASE, SmallBlueVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_BLUE_VASE = register("tall_blue_vase", SuperiorstructuresModBlocks.TALL_BLUE_VASE, TallBlueVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_BLUE_VASE = register("large_blue_vase", SuperiorstructuresModBlocks.LARGE_BLUE_VASE, LargeBlueVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_PURPLE_VASE = register("small_purple_vase", SuperiorstructuresModBlocks.SMALL_PURPLE_VASE, SmallPurpleVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_PURPLE_VASE = register("tall_purple_vase", SuperiorstructuresModBlocks.TALL_PURPLE_VASE, TallPurpleVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_PURPLE_VASE = register("large_purple_vase", SuperiorstructuresModBlocks.LARGE_PURPLE_VASE, LargePurpleVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_MAGENTA_VASE = register("small_magenta_vase", SuperiorstructuresModBlocks.SMALL_MAGENTA_VASE, SmallMagentaVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_MAGENTA_VASE = register("tall_magenta_vase", SuperiorstructuresModBlocks.TALL_MAGENTA_VASE, TallMagentaVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_MAGENTA_VASE = register("large_magenta_vase", SuperiorstructuresModBlocks.LARGE_MAGENTA_VASE, LargeMagentaVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_PINK_VASE = register("small_pink_vase", SuperiorstructuresModBlocks.SMALL_PINK_VASE, SmallPinkVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_PINK_VASE = register("tall_pink_vase", SuperiorstructuresModBlocks.TALL_PINK_VASE, TallPinkVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_PINK_VASE = register("large_pink_vase", SuperiorstructuresModBlocks.LARGE_PINK_VASE, LargePinkVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_BROWN_VASE = register("small_brown_vase", SuperiorstructuresModBlocks.SMALL_BROWN_VASE, SmallBrownVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_BROWN_VASE = register("tall_brown_vase", SuperiorstructuresModBlocks.TALL_BROWN_VASE, TallBrownVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_BROWN_VASE = register("large_brown_vase", SuperiorstructuresModBlocks.LARGE_BROWN_VASE, LargeBrownVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_LIGHT_GRAY_VASE = register("small_light_gray_vase", SuperiorstructuresModBlocks.SMALL_LIGHT_GRAY_VASE, SmallLightGrayVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_LIGHT_GRAY_VASE = register("tall_light_gray_vase", SuperiorstructuresModBlocks.TALL_LIGHT_GRAY_VASE, TallLightGrayVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_LIGHT_GRAY_VASE = register("large_light_gray_vase", SuperiorstructuresModBlocks.LARGE_LIGHT_GRAY_VASE, LargeLightGrayVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_DARK_GRAY_VASE = register("small_dark_gray_vase", SuperiorstructuresModBlocks.SMALL_DARK_GRAY_VASE, SmallDarkGrayVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_DARK_GRAY_VASE = register("tall_dark_gray_vase", SuperiorstructuresModBlocks.TALL_DARK_GRAY_VASE, TallDarkGrayVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_DARK_GRAY_VASE = register("large_dark_gray_vase", SuperiorstructuresModBlocks.LARGE_DARK_GRAY_VASE, LargeDarkGrayVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SMALL_BLACK_VASE = register("small_black_vase", SuperiorstructuresModBlocks.SMALL_BLACK_VASE, SmallBlackVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TALL_BLACK_VASE = register("tall_black_vase", SuperiorstructuresModBlocks.TALL_BLACK_VASE, TallBlackVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LARGE_BLACK_VASE = register("large_black_vase", SuperiorstructuresModBlocks.LARGE_BLACK_VASE, LargeBlackVaseBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> POWERED_CORE = register("powered_core", SuperiorstructuresModBlocks.POWERED_CORE, PoweredCoreBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> PULSING_CORE = register("pulsing_core", SuperiorstructuresModBlocks.PULSING_CORE, PulsingCoreBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> POWER_CORE = register("power_core", SuperiorstructuresModBlocks.POWER_CORE, PowerCoreBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> COPPER_PIPE = register("copper_pipe", SuperiorstructuresModBlocks.COPPER_PIPE, CopperPipeBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ARTIFICERY_TABLE = register("artificery_table", SuperiorstructuresModBlocks.ARTIFICERY_TABLE, ArtificeryTableBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TRANSCEIVER = register("transceiver", SuperiorstructuresModBlocks.TRANSCEIVER, TransceiverBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TRANSCEIVER_SENDING_OFF = register("transceiver_sending_off", SuperiorstructuresModBlocks.TRANSCEIVER_SENDING_OFF, TransceiverSendingOffBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TRANSCEIVER_SENDING_ON = register("transceiver_sending_on", SuperiorstructuresModBlocks.TRANSCEIVER_SENDING_ON, TransceiverSendingOnBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TRANSCEIVER_RECIEVING_ON = register("transceiver_recieving_on", SuperiorstructuresModBlocks.TRANSCEIVER_RECIEVING_ON, TransceiverRecievingOnBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> PLONKER = register("plonker", SuperiorstructuresModBlocks.PLONKER, PlonkerBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ACTIVATED_PLONKER = register("activated_plonker", SuperiorstructuresModBlocks.ACTIVATED_PLONKER, ActivatedPlonkerBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ACTIVATED_MUNCHER = register("activated_muncher", SuperiorstructuresModBlocks.ACTIVATED_MUNCHER, ActivatedMuncherBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ACTIVATED_FAN = register("activated_fan", SuperiorstructuresModBlocks.ACTIVATED_FAN, ActivatedFanBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ACTIVATED_FAN_2 = register("activated_fan_2", SuperiorstructuresModBlocks.ACTIVATED_FAN_2, ActivatedFan2BlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ACTIVATED_FAN_3 = register("activated_fan_3", SuperiorstructuresModBlocks.ACTIVATED_FAN_3, ActivatedFan3BlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> PHASED_ENDORITE_TILES = register("phased_endorite_tiles", SuperiorstructuresModBlocks.PHASED_ENDORITE_TILES, PhasedEndoriteTilesBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ELECTRIFIED_COPPER_PIPE = register("electrified_copper_pipe", SuperiorstructuresModBlocks.ELECTRIFIED_COPPER_PIPE, ElectrifiedCopperPipeBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TETHER = register("tether", SuperiorstructuresModBlocks.TETHER, TetherTileEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TUNEROD_STEM = register("tunerod_stem", SuperiorstructuresModBlocks.TUNEROD_STEM, TunerodStemBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TUNE_BLOCK = register("tune_block", SuperiorstructuresModBlocks.TUNE_BLOCK, TuneBlockBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SENTINEL = register("sentinel", SuperiorstructuresModBlocks.SENTINEL, SentinelBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SUSPICIOUS_TICKING_CITY_ENDSTONE = register("suspicious_ticking_city_endstone", SuperiorstructuresModBlocks.SUSPICIOUS_TICKING_CITY_ENDSTONE,
			SuspiciousTickingCityEndstoneBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SUSPICIOUS_TICKING_DIRT = register("suspicious_ticking_dirt", SuperiorstructuresModBlocks.SUSPICIOUS_TICKING_DIRT, SuspiciousTickingDirtBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ANCIENT_TICKING_DIRT = register("ancient_ticking_dirt", SuperiorstructuresModBlocks.ANCIENT_TICKING_DIRT, AncientTickingDirtBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> GRAVE_TICKING_DIRT = register("grave_ticking_dirt", SuperiorstructuresModBlocks.GRAVE_TICKING_DIRT, GraveTickingDirtBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> LUSH_TICKING_DIRT = register("lush_ticking_dirt", SuperiorstructuresModBlocks.LUSH_TICKING_DIRT, LushTickingDirtBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TOWN_TICKING_DIRT = register("town_ticking_dirt", SuperiorstructuresModBlocks.TOWN_TICKING_DIRT, TownTickingDirtBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TICKING_NETHERRACK = register("ticking_netherrack", SuperiorstructuresModBlocks.TICKING_NETHERRACK, TickingNetherrackBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> FORTRESS_TICKING_NETHERRACK = register("fortress_ticking_netherrack", SuperiorstructuresModBlocks.FORTRESS_TICKING_NETHERRACK, FortressTickingNetherrackBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TICKING_BLACKSTONE = register("ticking_blackstone", SuperiorstructuresModBlocks.TICKING_BLACKSTONE, TickingBlackstoneBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TICKING_STONE = register("ticking_stone", SuperiorstructuresModBlocks.TICKING_STONE, TickingStoneBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> MINER_TICKING_STONE = register("miner_ticking_stone", SuperiorstructuresModBlocks.MINER_TICKING_STONE, MinerTickingStoneBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SUSPICIOUS_TICKING_SAND = register("suspicious_ticking_sand", SuperiorstructuresModBlocks.SUSPICIOUS_TICKING_SAND, SuspiciousTickingSandBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> PYRAMID_TICKING_SAND = register("pyramid_ticking_sand", SuperiorstructuresModBlocks.PYRAMID_TICKING_SAND, PyramidTickingSandBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TICKING_GRAVEL = register("ticking_gravel", SuperiorstructuresModBlocks.TICKING_GRAVEL, TickingGravelBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TICKING_DEEPSLATE = register("ticking_deepslate", SuperiorstructuresModBlocks.TICKING_DEEPSLATE, TickingDeepslateBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> TICKING_ENDSTONE = register("ticking_endstone", SuperiorstructuresModBlocks.TICKING_ENDSTONE, TickingEndstoneBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> FLAVORBLOCK = register("flavorblock", SuperiorstructuresModBlocks.FLAVORBLOCK, FlavorblockBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> WARDING_EYES = register("warding_eyes", SuperiorstructuresModBlocks.WARDING_EYES, WardingEyesBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> BURROWING_THORNS = register("burrowing_thorns", SuperiorstructuresModBlocks.BURROWING_THORNS, BurrowingThornsBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SCULK_TEETH = register("sculk_teeth", SuperiorstructuresModBlocks.SCULK_TEETH, SculkTeethBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SPITEFUL_EYE = register("spiteful_eye", SuperiorstructuresModBlocks.SPITEFUL_EYE, SpitefulEyeBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SINGING_SAND = register("singing_sand", SuperiorstructuresModBlocks.SINGING_SAND, SingingSandBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> SPIRALING_SAND = register("spiraling_sand", SuperiorstructuresModBlocks.SPIRALING_SAND, SpiralingSandBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ICONOCLAST = register("iconoclast", SuperiorstructuresModBlocks.ICONOCLAST, IconoclastBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> ANCIENT_LIGHTNING_COIL = register("ancient_lightning_coil", SuperiorstructuresModBlocks.ANCIENT_LIGHTNING_COIL, AncientLightningCoilBlockEntity::new);
	public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> PUZZLE_BOX = register("puzzle_box", SuperiorstructuresModBlocks.PUZZLE_BOX, PuzzleBoxBlockEntity::new);

	// Start of user code block custom block entities
	// End of user code block custom block entities
	private static DeferredHolder<BlockEntityType<?>, BlockEntityType<?>> register(String registryname, DeferredHolder<Block, Block> block, BlockEntityType.BlockEntitySupplier<?> supplier) {
		return REGISTRY.register(registryname, () -> BlockEntityType.Builder.of(supplier, block.get()).build(null));
	}

	@SubscribeEvent
	public static void registerCapabilities(RegisterCapabilitiesEvent event) {
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_POT.get(), (blockEntity, side) -> ((SmallPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_POT.get(), (blockEntity, side) -> ((TallPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_POT.get(), (blockEntity, side) -> ((LargePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_RED_POT.get(), (blockEntity, side) -> ((SmallRedPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_RED_POT.get(), (blockEntity, side) -> ((TallRedPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_RED_POT.get(), (blockEntity, side) -> ((LargeRedPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_ORANGE_POT.get(), (blockEntity, side) -> ((SmallOrangePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_ORANGE_POT.get(), (blockEntity, side) -> ((TallOrangePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_ORANGE_POT.get(), (blockEntity, side) -> ((LargeOrangePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_YELLOW_POT.get(), (blockEntity, side) -> ((SmallYellowPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_YELLOW_POT.get(), (blockEntity, side) -> ((TallYellowPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_YELLOW_POT.get(), (blockEntity, side) -> ((LargeYellowPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_LIME_POT.get(), (blockEntity, side) -> ((SmallLimePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_LIME_POT.get(), (blockEntity, side) -> ((TallLimePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_LIME_POT.get(), (blockEntity, side) -> ((LargeLimePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_GREEN_POT.get(), (blockEntity, side) -> ((SmallGreenPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_GREEN_POT.get(), (blockEntity, side) -> ((TallGreenPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_GREEN_POT.get(), (blockEntity, side) -> ((LargeGreenPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_LIGHT_BLUE_POT.get(), (blockEntity, side) -> ((SmallLightBluePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_LIGHT_BLUE_POT.get(), (blockEntity, side) -> ((TallLightBluePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_LIGHT_BLUE_POT.get(), (blockEntity, side) -> ((LargeLightBluePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_CYAN_POT.get(), (blockEntity, side) -> ((SmallCyanPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_CYAN_POT.get(), (blockEntity, side) -> ((TallCyanPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_CYAN_POT.get(), (blockEntity, side) -> ((LargeCyanPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_BLUE_POT.get(), (blockEntity, side) -> ((SmallBluePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_BLUE_POT.get(), (blockEntity, side) -> ((TallBluePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_BLUE_POT.get(), (blockEntity, side) -> ((LargeBluePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_PINK_POT.get(), (blockEntity, side) -> ((SmallPinkPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_PINK_POT.get(), (blockEntity, side) -> ((TallPinkPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_PINK_POT.get(), (blockEntity, side) -> ((LargePinkPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_MAGENTA_POT.get(), (blockEntity, side) -> ((SmallMagentaPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_MAGENTA_POT.get(), (blockEntity, side) -> ((TallMagentaPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_MAGENTA_POT.get(), (blockEntity, side) -> ((LargeMagentaPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_PURPLE_POT.get(), (blockEntity, side) -> ((SmallPurplePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_PURPLE_POT.get(), (blockEntity, side) -> ((TallPurplePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_PURPLE_POT.get(), (blockEntity, side) -> ((LargePurplePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_BROWN_POT.get(), (blockEntity, side) -> ((SmallBrownPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_BROWN_POT.get(), (blockEntity, side) -> ((TallBrownPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_BROWN_POT.get(), (blockEntity, side) -> ((LargeBrownPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_WHITE_POT.get(), (blockEntity, side) -> ((SmallWhitePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_WHITE_POT.get(), (blockEntity, side) -> ((TallWhitePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_WHITE_POT.get(), (blockEntity, side) -> ((LargeWhitePotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_LIGHT_GRAY_POT.get(), (blockEntity, side) -> ((SmallLightGrayPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_LIGHT_GRAY_POT.get(), (blockEntity, side) -> ((TallLightGrayPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_LIGHT_GRAY_POT.get(), (blockEntity, side) -> ((LargeLightGrayPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_DARK_GRAY_POT.get(), (blockEntity, side) -> ((SmallDarkGrayPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_DARK_GRAY_POT.get(), (blockEntity, side) -> ((TallDarkGrayPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_DARK_GRAY_POT.get(), (blockEntity, side) -> ((LargeDarkGrayPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_BLACK_POT.get(), (blockEntity, side) -> ((SmallBlackPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_BLACK_POT.get(), (blockEntity, side) -> ((TallBlackPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_BLACK_POT.get(), (blockEntity, side) -> ((LargeBlackPotBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_VASE.get(), (blockEntity, side) -> ((SmallVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_VASE.get(), (blockEntity, side) -> ((TallVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_VASE.get(), (blockEntity, side) -> ((LargeVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_RED_VASE.get(), (blockEntity, side) -> ((SmallRedVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_RED_VASE.get(), (blockEntity, side) -> ((TallRedVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_RED_VASE.get(), (blockEntity, side) -> ((LargeRedVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_ORANGE_VASE.get(), (blockEntity, side) -> ((SmallOrangeVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_ORANGE_VASE.get(), (blockEntity, side) -> ((TallOrangeVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_ORANGE_VASE.get(), (blockEntity, side) -> ((LargeOrangeVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_YELLOW_VASE.get(), (blockEntity, side) -> ((SmallYellowVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_YELLOW_VASE.get(), (blockEntity, side) -> ((TallYellowVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_YELLOW_VASE.get(), (blockEntity, side) -> ((LargeYellowVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_LIME_VASE.get(), (blockEntity, side) -> ((SmallLimeVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_LIME_VASE.get(), (blockEntity, side) -> ((TallLimeVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_LIME_VASE.get(), (blockEntity, side) -> ((LargeLimeVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_GREEN_VASE.get(), (blockEntity, side) -> ((SmallGreenVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_GREEN_VASE.get(), (blockEntity, side) -> ((TallGreenVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_GREEN_VASE.get(), (blockEntity, side) -> ((LargeGreenVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_CYAN_VASE.get(), (blockEntity, side) -> ((SmallCyanVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_CYAN_VASE.get(), (blockEntity, side) -> ((TallCyanVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_CYAN_VASE.get(), (blockEntity, side) -> ((LargeCyanVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_LIGHT_BLUE_VASE.get(), (blockEntity, side) -> ((SmallLightBlueVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_LIGHT_BLUE_VASE.get(), (blockEntity, side) -> ((TallLightBlueVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_LIGHT_BLUE_VASE.get(), (blockEntity, side) -> ((LargeLightBlueVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_BLUE_VASE.get(), (blockEntity, side) -> ((SmallBlueVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_BLUE_VASE.get(), (blockEntity, side) -> ((TallBlueVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_BLUE_VASE.get(), (blockEntity, side) -> ((LargeBlueVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_PURPLE_VASE.get(), (blockEntity, side) -> ((SmallPurpleVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_PURPLE_VASE.get(), (blockEntity, side) -> ((TallPurpleVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_PURPLE_VASE.get(), (blockEntity, side) -> ((LargePurpleVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_MAGENTA_VASE.get(), (blockEntity, side) -> ((SmallMagentaVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_MAGENTA_VASE.get(), (blockEntity, side) -> ((TallMagentaVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_MAGENTA_VASE.get(), (blockEntity, side) -> ((LargeMagentaVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_PINK_VASE.get(), (blockEntity, side) -> ((SmallPinkVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_PINK_VASE.get(), (blockEntity, side) -> ((TallPinkVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_PINK_VASE.get(), (blockEntity, side) -> ((LargePinkVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_BROWN_VASE.get(), (blockEntity, side) -> ((SmallBrownVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_BROWN_VASE.get(), (blockEntity, side) -> ((TallBrownVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_BROWN_VASE.get(), (blockEntity, side) -> ((LargeBrownVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_LIGHT_GRAY_VASE.get(), (blockEntity, side) -> ((SmallLightGrayVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_LIGHT_GRAY_VASE.get(), (blockEntity, side) -> ((TallLightGrayVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_LIGHT_GRAY_VASE.get(), (blockEntity, side) -> ((LargeLightGrayVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_DARK_GRAY_VASE.get(), (blockEntity, side) -> ((SmallDarkGrayVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_DARK_GRAY_VASE.get(), (blockEntity, side) -> ((TallDarkGrayVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_DARK_GRAY_VASE.get(), (blockEntity, side) -> ((LargeDarkGrayVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SMALL_BLACK_VASE.get(), (blockEntity, side) -> ((SmallBlackVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TALL_BLACK_VASE.get(), (blockEntity, side) -> ((TallBlackVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LARGE_BLACK_VASE.get(), (blockEntity, side) -> ((LargeBlackVaseBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, POWERED_CORE.get(), (blockEntity, side) -> ((PoweredCoreBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, PULSING_CORE.get(), (blockEntity, side) -> ((PulsingCoreBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, POWER_CORE.get(), (blockEntity, side) -> ((PowerCoreBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, COPPER_PIPE.get(), (blockEntity, side) -> ((CopperPipeBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ARTIFICERY_TABLE.get(), (blockEntity, side) -> ((ArtificeryTableBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TRANSCEIVER.get(), (blockEntity, side) -> ((TransceiverBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TRANSCEIVER_SENDING_OFF.get(), (blockEntity, side) -> ((TransceiverSendingOffBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TRANSCEIVER_SENDING_ON.get(), (blockEntity, side) -> ((TransceiverSendingOnBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TRANSCEIVER_RECIEVING_ON.get(), (blockEntity, side) -> ((TransceiverRecievingOnBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, PLONKER.get(), (blockEntity, side) -> ((PlonkerBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ACTIVATED_PLONKER.get(), (blockEntity, side) -> ((ActivatedPlonkerBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ACTIVATED_MUNCHER.get(), (blockEntity, side) -> ((ActivatedMuncherBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ACTIVATED_FAN.get(), (blockEntity, side) -> ((ActivatedFanBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ACTIVATED_FAN_2.get(), (blockEntity, side) -> ((ActivatedFan2BlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ACTIVATED_FAN_3.get(), (blockEntity, side) -> ((ActivatedFan3BlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, PHASED_ENDORITE_TILES.get(), (blockEntity, side) -> ((PhasedEndoriteTilesBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ELECTRIFIED_COPPER_PIPE.get(), (blockEntity, side) -> ((ElectrifiedCopperPipeBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TUNEROD_STEM.get(), (blockEntity, side) -> ((TunerodStemBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TUNE_BLOCK.get(), (blockEntity, side) -> ((TuneBlockBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SENTINEL.get(), (blockEntity, side) -> ((SentinelBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SUSPICIOUS_TICKING_CITY_ENDSTONE.get(), (blockEntity, side) -> ((SuspiciousTickingCityEndstoneBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SUSPICIOUS_TICKING_DIRT.get(), (blockEntity, side) -> ((SuspiciousTickingDirtBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ANCIENT_TICKING_DIRT.get(), (blockEntity, side) -> ((AncientTickingDirtBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, GRAVE_TICKING_DIRT.get(), (blockEntity, side) -> ((GraveTickingDirtBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, LUSH_TICKING_DIRT.get(), (blockEntity, side) -> ((LushTickingDirtBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TOWN_TICKING_DIRT.get(), (blockEntity, side) -> ((TownTickingDirtBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TICKING_NETHERRACK.get(), (blockEntity, side) -> ((TickingNetherrackBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, FORTRESS_TICKING_NETHERRACK.get(), (blockEntity, side) -> ((FortressTickingNetherrackBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TICKING_BLACKSTONE.get(), (blockEntity, side) -> ((TickingBlackstoneBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TICKING_STONE.get(), (blockEntity, side) -> ((TickingStoneBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, MINER_TICKING_STONE.get(), (blockEntity, side) -> ((MinerTickingStoneBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SUSPICIOUS_TICKING_SAND.get(), (blockEntity, side) -> ((SuspiciousTickingSandBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, PYRAMID_TICKING_SAND.get(), (blockEntity, side) -> ((PyramidTickingSandBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TICKING_GRAVEL.get(), (blockEntity, side) -> ((TickingGravelBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TICKING_DEEPSLATE.get(), (blockEntity, side) -> ((TickingDeepslateBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, TICKING_ENDSTONE.get(), (blockEntity, side) -> ((TickingEndstoneBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, FLAVORBLOCK.get(), (blockEntity, side) -> ((FlavorblockBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, WARDING_EYES.get(), (blockEntity, side) -> ((WardingEyesBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, BURROWING_THORNS.get(), (blockEntity, side) -> ((BurrowingThornsBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SCULK_TEETH.get(), (blockEntity, side) -> ((SculkTeethBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SPITEFUL_EYE.get(), (blockEntity, side) -> ((SpitefulEyeBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SINGING_SAND.get(), (blockEntity, side) -> ((SingingSandBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, SPIRALING_SAND.get(), (blockEntity, side) -> ((SpiralingSandBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ICONOCLAST.get(), (blockEntity, side) -> ((IconoclastBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, ANCIENT_LIGHTNING_COIL.get(), (blockEntity, side) -> ((AncientLightningCoilBlockEntity) blockEntity).getItemHandler());
		event.registerBlockEntity(Capabilities.ItemHandler.BLOCK, PUZZLE_BOX.get(), (blockEntity, side) -> ((PuzzleBoxBlockEntity) blockEntity).getItemHandler());
	}
}
